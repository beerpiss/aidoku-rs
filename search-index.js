var searchIndex = JSON.parse('{\
"aidoku":{"doc":"Aidoku Rust Source API","t":[13,13,13,3,13,13,3,13,3,4,13,13,13,3,13,3,4,3,4,4,13,13,3,13,13,13,13,13,13,13,13,13,13,13,5,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,11,12,12,5,0,12,12,0,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,3,4,13,13,13,4,13,13,13,13,13,13,13,13,13,6,13,13,13,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,14,23,23,23,23,23,23,23,23,23,14,12,12,12,12,12,12,12,13,3,13,13,13,13,4,13,13,13,3,6,3,13,3,13,3,3,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,11,11,11,11,11,11,11,11,11,0,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,10,11,5,5,3,4,13,13,13,4,13,13,13,13,13,13,13,13,13,6,13,13,13,4,12,12,12,12,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,5,12,12,13,13,13,4,13,13,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11],"n":["Author","Base","Cancelled","Chapter","Check","Completed","DeepLink","Default","Filter","FilterType","Genre","Group","Hiatus","Listing","Ltr","Manga","MangaContentRating","MangaPageResult","MangaStatus","MangaViewer","Nsfw","Ongoing","Page","Rtl","Safe","Scroll","Select","Sort","SortSelection","Suggestive","Text","Title","Unknown","Vertical","alloc_error_handle","artist","author","base64","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","categories","chapter","chapter","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cover","create","create","create","create","create","date_updated","default","default","default","default","default","default","default","default","default","default","description","eq","eq","eq","eq","eq","eq","eq","eq","error","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","has_more","id","id","index","into","into","into","into","into","into","into","into","into","into","into","kind","lang","manga","manga","name","name","ne","nsfw","object","panic_handle","prelude","scanlator","status","std","text","title","title","to_int","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","url","url","url","value","viewer","volume","AidokuError","AidokuErrorKind","DefaultNotFound","JsonParseError","ModifyError","NodeError","NodeError","NotArray","NotBool","NotFloat","NotInt","NotNode","NotObject","NotString","ParseError","Result","Unimplemented","Utf8Error","ValueCast","ValueCastError","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","eq","eq","eq","eq","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","into","into","into","into","ne","ne","reason","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","0","0","0","format","get_chapter_list","get_manga_details","get_manga_list","get_manga_listing","get_page_list","handle_notification","handle_url","initialize","modify_image_request","println","0","0","0","0","1","1","2","Array","ArrayRef","Bool","Date","Float","Int","Kind","Node","Null","Object","ObjectRef","Rid","String","String","StringRef","Unknown","ValueRef","Vec","Write","add","add_assign","advance_back_by","advance_by","allocator","append","as_array","as_bool","as_bytes","as_date","as_date","as_float","as_int","as_mut","as_mut","as_mut","as_mut_ptr","as_mut_slice","as_mut_str","as_mut_vec","as_node","as_object","as_ptr","as_ref","as_ref","as_ref","as_ref","as_slice","as_str","as_string","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capacity","capacity","clear","clear","clone","clone","clone","clone","clone","clone","clone","clone_from","clone_from","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","copy","current_date","dedup","dedup_by","dedup_by_key","default","default","default","default","default","default","defaults","deref","deref","deref_mut","deref_mut","destroy","drain","drain","drain_filter","drop","drop","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","error","extend","extend","extend","extend","extend","extend","extend","extend","extend_from_slice","extend_from_within","extend_from_within","extend_one","extend_one","extend_one","extend_one","extend_one","extend_one","extend_one","extend_reserve","extend_reserve","extend_reserve","extend_reserve","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","format","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_iter","from_raw_parts","from_raw_parts","from_raw_parts_in","from_str","from_utf16","from_utf16_lossy","from_utf8","from_utf8_lossy","from_utf8_unchecked","get","get","hash","hash","html","index","index","index","index","index","index","index","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","insert","insert","insert","insert_str","into","into","into","into","into","into","into","into_boxed_slice","into_boxed_str","into_bytes","into_flattened","into_iter","into_iter","into_iter","into_iter","into_raw_parts","into_raw_parts","into_raw_parts_with_alloc","into_searcher","is_contained_in","is_empty","is_empty","is_empty","is_empty","is_empty","is_none","is_prefix_of","is_some","is_suffix_of","json","keys","kind","leak","len","len","len","len","len","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","net","new","new","new","new","new","new_in","next","next_back","partial_cmp","partial_cmp","pop","pop","print","push","push","push_str","read","remove","remove","remove","remove","remove_matches","replace_range","reserve","reserve","reserve_exact","reserve_exact","resize","resize_with","retain","retain","retain_mut","set","set","set_len","shrink_to","shrink_to","shrink_to_fit","shrink_to_fit","spare_capacity_mut","splice","split_at_spare_mut","split_off","split_off","strip_prefix_of","strip_suffix_of","swap_remove","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","truncate","truncate","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_reserve","try_reserve","try_reserve_exact","try_reserve_exact","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value_kind","values","with_capacity","with_capacity","with_capacity_in","write_char","write_char","write_fmt","write_str","write_str","defaults_get","defaults_set","AidokuError","AidokuErrorKind","DefaultNotFound","JsonParseError","ModifyError","NodeError","NodeError","NotArray","NotBool","NotFloat","NotInt","NotNode","NotObject","NotString","ParseError","Result","Unimplemented","Utf8Error","ValueCast","ValueCastError","reason","0","0","0","Node","append","array","attr","base_uri","body","borrow","borrow_mut","class_name","clone","clone_into","close","data","drop","escape","escape_html_entities","first","fmt","fmt","from","from","has_attr","has_class","html","id","into","last","new","new_fragment","new_fragment_with_uri","new_with_uri","next","outer_html","own_text","prepend","previous","select","set_html","set_text","tag_name","text","to_owned","to_string","try_from","try_into","type_id","unescape","unescape_html_entities","untrimmed_text","parse","0","1","Delete","Get","Head","HttpMethod","Post","Put","Request","body","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","close","data","delete","drop","eq","fmt","fmt","from","from","get","get_header","head","header","html","into","into","json","new","post","put","send","set_rate_limit","set_rate_limit_period","set_url","status_code","string","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","url"],"q":["aidokuaidoku::error","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aidoku::error::AidokuErrorKind","","","aidoku::prelude","","","","","","","","","","","aidoku::stdaidoku::std::defaults","","aidoku::std::error","","","","","","","","","","","","","","","","","","","","","aidoku::std::error::AidokuErrorKind","","","aidoku::std::html","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aidoku::std::json","aidoku::std::net","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","A manga that has been cancelled. This could convey the …","Struct containing metadata about a chapter. Different …","","A manga that has completed production/translation.","Struct representing a deep link. This deep link is used to …","","Struct representing a search filter.","","","","The manga is on hiatus. Could happen because the author …","Struct containing information about a listing.","","The Manga struct contains information about a manga. …","An enumeration representing the manga’s content rating.","A struct representing a “page” of mangas. There is no …","An enum representing the various statuses a manga can have.","An enumeration representing different manga viewers, used …","","A manga that is still releasing chapters/being translated.","Struct representing a manga page.","","","","","","","","","","The manga status cannot be determined.","","","The name of the manga’s artist. Multiple artists should …","The name of the manga’s author. Multiple authors should …","The base64-encoded data of the page. If you got it from a …","","","","","","","","","","","","","","","","","","","","","","","A vector containing all the manga’s tags/categories.","The chapter number of the chapter.","The chapter to link to. You only need to provide the …","","","","","","","","","","","","","","","","","","","","","","","A URL pointing to a thumbnail which can be used to display …","","","","","","The publishing date of the chapter.","","","","","","","","","","","A description for this manga.","","","","","","","","","Error module for Aidoku operations.","","","","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Whether there are any more pages after this one. Used to …","The given identifier of this manga, which can be anything, …","The given identifier of this manga, which can be anything, …","The index of the page, starting from 0.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","The filter variant.","The chapter’s language. It should be a valid language …","The mangas that were found in the page.","The manga to link to.","The filter’s name, which matches the name of the filter …","The name of the listing.","","The manga’s content rating (safe, suggestive or NSFW).","The raw filter object.","","The Aidoku prelude, which includes format!, println!, as …","The scanlator/scanlation group that posted the chapter.","The status of the manga (completed, ongoing, hiatus, …","The Aidoku standard module, which includes all functions …","The page’s text, mostly used for light novels. Aidoku …","The title of the manga. It can be either the official …","The title of the chapter.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The URL for this manga. Will be used for sharing and for …","The chapter URL, which will be used for sharing in the …","The URL to the image file representing the page.","The filter’s value. This is dependent on what the filter …","The viewer to use for this manga.","The volume that the chapter belongs to.","","","The defaults key doesn’t have a value set.","JSON parsing error.","There was an error modifying HTML.","","Error when handling HTML content through html::Node","","","","","","","","There was an error parsing HTML.","","This feature is unimplemented.","There was an error handling UTF-8 data.","Error when typecasting a ValueRef to their types.","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Lower-bound index","Upper-bound index","","A type which represents an array.","","","","","An enumeration of different ValueRef types.","","","","A type that represents a string-keyed and value object.","A standard descriptor, used for data exchange between the …","A UTF-8–encoded, growable string.","","A type which represents a string.","","A type which can represent value of any kind. It is used …","A contiguous growable array type, written as <code>Vec&lt;T&gt;</code>, short …","A trait for writing or formatting into Unicode-accepting …","","","","","Returns a reference to the underlying allocator.","Moves all the elements of <code>other</code> into <code>self</code>, leaving <code>other</code> …","Cast the ValueRef to an ArrayRef.","Cast the ValueRef to a boolean.","Returns a byte slice of this <code>String</code>’s contents.","Converts a textual representaion of a date to a Unix …","Convenience method that calls ValueRef::as_date.","Cast the ValueRef to an f64.","Cast the ValueRef to an i64.","","","","Returns an unsafe mutable pointer to the vector’s …","Extracts a mutable slice of the entire vector.","Converts a <code>String</code> into a mutable string slice.","Returns a mutable reference to the contents of this <code>String</code>.","Cast the ValueRef to a Node.","Cast the ValueRef to an ObjectRef.","Returns a raw pointer to the vector’s buffer, or a …","","","","","Extracts a slice containing the entire vector.","Extracts a string slice containing the entire <code>String</code>.","Cast the ValueRef to a StringRef.","","","","","","","","","","","","","","","","","","","Returns the number of elements the vector can hold without …","Returns this <code>String</code>’s capacity, in bytes.","Clears the vector, removing all values.","Truncates this <code>String</code>, removing all contents.","","","","","","","","","","","","","","","","","","","Copies a ValueRef and returns a descriptor pointing to the …","Gets the current time as a Unix timestamp.","Removes consecutive repeated elements in the vector …","Removes all but the first of consecutive elements in the …","Removes all but the first of consecutive elements in the …","Creates a null ValueRef.","Creates an empty StringRef.","Creates an empty ArrayRef.","Creates an empty ObjectRef.","Creates an empty <code>Vec&lt;T&gt;</code>.","Creates an empty <code>String</code>.","Interface for interacting with user preferences.","","","","","Destroys a ValueRef.","Removes the specified range from the vector in bulk, …","Removes the specified range from the string in bulk, …","Creates an iterator which uses a closure to determine if …","","","","","","","","","","","","","","","","","","","","","","","Clones and appends all elements in a slice to the <code>Vec</code>.","Copies elements from <code>src</code> range to the end of the vector.","Copies elements from <code>src</code> range to the end of the string.","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Convert a boxed slice into a vector by transferring …","Convert a clone-on-write slice into a vector.","Allocate a <code>Vec&lt;T&gt;</code> and fill it by cloning <code>s</code>’s items.","Allocate a <code>Vec&lt;T&gt;</code> and fill it by cloning <code>s</code>’s items.","Turn a <code>VecDeque&lt;T&gt;</code> into a <code>Vec&lt;T&gt;</code>.","Allocate a <code>Vec&lt;u8&gt;</code> and fill it with a UTF-8 string.","Allocate a <code>Vec&lt;T&gt;</code> and move <code>s</code>’s items into it.","Converts the given <code>String</code> to a vector <code>Vec</code> that holds …","Converts a <code>CString</code> into a Vec&lt;u8&gt;.","Returns the argument unchanged.","Converts a <code>BinaryHeap&lt;T&gt;</code> into a <code>Vec&lt;T&gt;</code>.","Allocates an owned <code>String</code> from a single character.","Converts the given boxed <code>str</code> slice to a <code>String</code>. It is …","Returns the argument unchanged.","Converts a clone-on-write string to an owned instance of …","Converts a <code>&amp;mut str</code> into a <code>String</code>.","Converts a <code>&amp;String</code> into a <code>String</code>.","Converts a <code>&amp;str</code> into a <code>String</code>.","","","","","","","","","Creates a <code>Vec&lt;T&gt;</code> directly from the raw components of …","Creates a new <code>String</code> from a length, capacity, and pointer.","Creates a <code>Vec&lt;T, A&gt;</code> directly from the raw components of …","","Decode a UTF-16–encoded vector <code>v</code> into a <code>String</code>, …","Decode a UTF-16–encoded slice <code>v</code> into a <code>String</code>, replacing …","Converts a vector of bytes to a <code>String</code>.","Converts a slice of bytes to a string, including invalid …","Converts a vector of bytes to a <code>String</code> without checking …","Get a ValueRef at the specified index.","Gets the value with the specified key.","","","A module for working with HTML. It provides a somewhat …","","","","","","","","","","","","","","","Insert a value at the end of the array.","Inserts an element at position <code>index</code> within the vector, …","Inserts a character into this <code>String</code> at a byte position.","Inserts a string slice into this <code>String</code> at a byte position.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Converts the vector into <code>Box&lt;[T]&gt;</code>.","Converts this <code>String</code> into a Box&lt;str&gt;.","Converts a <code>String</code> into a byte vector.","Takes a <code>Vec&lt;[T; N]&gt;</code> and flattens it into a <code>Vec&lt;T&gt;</code>.","","","Creates a consuming iterator, that is, one that moves each …","","Decomposes a <code>Vec&lt;T&gt;</code> into its raw components.","Decomposes a <code>String</code> into its raw components.","Decomposes a <code>Vec&lt;T&gt;</code> into its raw components.","","","Check if the string is empty.","Check if the array is empty.","Checks if the object is empty.","Returns <code>true</code> if the vector contains no elements.","Returns <code>true</code> if this <code>String</code> has a length of zero, and <code>false</code>…","Check if the ValueRef is null.","","Check if the ValueRef is not null.","","Converts JSON to a ValueRef.","Get all keys of the object as an array.","Get the type of the ValueRef.","Consumes and leaks the <code>Vec</code>, returning a mutable reference …","Returns the length of the string.","","Get the number of key-value pairs in the object.","Returns the number of elements in the vector, also …","Returns the length of this <code>String</code>, in bytes, not <code>char</code>s or …","","","","","","","","","","","Create and send HTTP requests.","Create a new ValueRef which points to a descriptor.","Create a new, empty ArrayRef.","Create a new, empty object.","Constructs a new, empty <code>Vec&lt;T&gt;</code>.","Creates a new empty <code>String</code>.","Constructs a new, empty <code>Vec&lt;T, A&gt;</code>.","","","","","Removes the last element from a vector and returns it, or …","Removes the last character from the string buffer and …","Prints a message to the Aidoku logs.","Appends an element to the back of a collection.","Appends the given <code>char</code> to the end of this <code>String</code>.","Appends a given string slice onto the end of this <code>String</code>.","Convert the StringRef into a String.","Removes the value at the specified index.","Remove the value associated with the specified key.","Removes and returns the element at position <code>index</code> within …","Removes a <code>char</code> from this <code>String</code> at a byte position and …","Remove all matches of pattern <code>pat</code> in the <code>String</code>.","Removes the specified range in the string, and replaces it …","Reserves capacity for at least <code>additional</code> more elements to …","Reserves capacity for at least <code>additional</code> bytes more than …","Reserves the minimum capacity for at least <code>additional</code> more …","Reserves the minimum capacity for at least <code>additional</code> …","Resizes the <code>Vec</code> in-place so that <code>len</code> is equal to <code>new_len</code>.","Resizes the <code>Vec</code> in-place so that <code>len</code> is equal to <code>new_len</code>.","Retains only the elements specified by the predicate.","Retains only the characters specified by the predicate.","Retains only the elements specified by the predicate, …","Sets a ValueRef at the specified index.","Sets a value with the specified key.","Forces the length of the vector to <code>new_len</code>.","Shrinks the capacity of the vector with a lower bound.","Shrinks the capacity of this <code>String</code> with a lower bound.","Shrinks the capacity of the vector as much as possible.","Shrinks the capacity of this <code>String</code> to match its length.","Returns the remaining spare capacity of the vector as a …","Creates a splicing iterator that replaces the specified …","Returns vector content as a slice of <code>T</code>, along with the …","Splits the collection into two at the given index.","Splits the string into two at the given byte index.","","","Removes an element from the vector and returns it.","","","","","","","","","","","Shortens the vector, keeping the first <code>len</code> elements and …","Shortens this <code>String</code> to the specified length.","","","","","","","","","","","","","","","Tries to reserve capacity for at least <code>additional</code> more …","Tries to reserve capacity for at least <code>additional</code> bytes …","Tries to reserve the minimum capacity for at least …","Tries to reserve the minimum capacity for at least …","","","","","","","","Returns the kind of the ValueRef.","Get all values of the object as an array.","Constructs a new, empty <code>Vec&lt;T&gt;</code> with at least the specified …","Creates a new empty <code>String</code> with at least the specified …","Constructs a new, empty <code>Vec&lt;T, A&gt;</code> with at least the …","","Writes a <code>char</code> into this writer, returning whether the …","Glue for usage of the <code>write!</code> macro with implementors of …","Writes a string slice into this writer, returning whether …","","Returns the ValueRef associated with the specified key.","Sets the value of the specified key.","","","The defaults key doesn’t have a value set.","JSON parsing error.","There was an error modifying HTML.","","Error when handling HTML content through html::Node","","","","","","","","There was an error parsing HTML.","","This feature is unimplemented.","There was an error handling UTF-8 data.","Error when typecasting a ValueRef to their types.","","","","","","Type which represents a HTML node, which can be a group of …","Add inner HTML into this element. The given HTML will be …","Get an array of Node. This is most commonly used with …","Get an attribute value by its key. To get an absolute URL …","Get the base URI of this Node","Get the document’s <code>body</code> element.","","","Get the literal value of this node’s <code>class</code> attribute. …","","","","Get the combined data of this element. Data is e.g. the …","","Get the node’s text and escape any HTML-reserved …","HTML escape an input string.","Get the first sibling of this element, which can be this …","","Returns the outer HTML of the node.","Get an instance from a Rid","Returns the argument unchanged.","Test if this element has an attribute. Case insensitive.","Test if this element has a class. Case insensitive.","Get the node’s inner HTML.","Get the <code>id</code> attribute of this element.","Calls <code>U::from(self)</code>.","Get the last sibling of this element, which can be this …","Parse HTML into a Node. As there is no base URI specified, …","Parse a HTML fragment, assuming that it forms the <code>body</code> of …","Parse a HTML fragment, assuming that it forms the <code>body</code> of …","Parse HTML into a Node. The given <code>base_uri</code> will be used …","Get the next sibling of the element, returning <code>None</code> if …","Get the node’s outer HTML.","Gets the (normalized) text owned by this element only; …","Add inner HTML into this element. The given HTML will be …","Get the previous sibling of the element, returning <code>None</code> if …","Find elements that matches the given CSS (or JQuery) …","Set the element’s inner HTML, clearning the existing …","Set the element’s text content, clearing any existing …","Get the name of the tag for this element. This will always …","Get the <strong>normalized, combined text</strong> of this element and its …","","","","","","Get the node’s text and unescape any HTML entities to …","Un-escape an HTML escaped string.","Get the text of this element and its children. Whitespace …","Parse JSON data","","","","","","","","","A type that makes a HTTP request.","Set the body’s data.","","","","","","","","Get the raw data from the response","Start a new DELETE request with the given URL.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Start a new GET request with the given URL.","Get response headers","Start a new HEAD request with the given URL.","Set a header.","Get the data as a Node.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Get the data as JSON","Start a new request with a URL and HTTP method","Start a new POST request with the given URL.","Start a new PUT request with the given URL.","","Sets the number of requests allowed within a time period.","Sets the rate limiting duration.","Set the URL for the request","Get the response’s status code","Gets the data as a string.","","","","","","","","Get the URL of the request"],"i":[3,3,4,0,3,4,0,6,0,0,3,3,4,0,6,0,0,0,0,0,5,4,0,6,5,6,3,3,3,5,3,3,4,6,0,8,8,12,3,4,5,6,7,8,9,10,11,12,13,3,4,5,6,7,8,9,10,11,12,13,8,11,13,3,4,5,6,7,8,9,10,11,12,13,3,4,5,6,7,8,9,10,11,12,13,8,8,9,11,12,13,11,3,4,5,6,7,8,9,11,12,13,8,3,4,5,6,8,10,11,13,0,3,4,5,6,8,9,10,11,12,13,3,3,3,4,5,6,7,8,9,10,11,12,13,9,8,11,12,3,4,5,6,7,8,9,10,11,12,13,7,11,9,13,7,10,13,8,7,0,0,11,8,0,12,8,11,3,3,4,5,6,7,8,9,10,11,12,13,3,4,5,6,7,8,9,10,11,12,13,3,4,5,6,7,8,9,10,11,12,13,3,4,5,6,7,8,9,10,11,12,13,8,11,12,7,8,11,0,0,23,23,24,0,23,25,25,25,25,25,25,25,24,0,23,23,23,0,22,23,24,25,22,23,24,25,22,23,24,25,22,23,24,25,22,23,24,25,22,23,24,25,22,22,22,22,23,24,25,22,23,24,25,22,23,22,22,23,24,25,22,23,24,25,22,23,24,25,22,23,24,25,69,70,71,0,0,0,0,0,0,0,0,0,0,0,33,36,30,38,33,30,30,39,0,39,39,39,39,0,39,39,39,0,0,0,39,0,39,0,0,0,28,28,30,30,32,32,33,33,28,33,36,33,33,32,32,28,32,32,28,28,33,33,32,32,32,28,28,32,28,33,39,33,36,30,38,32,32,28,28,39,33,36,30,38,32,32,28,28,32,28,32,28,39,33,36,30,38,32,28,32,28,39,33,36,30,38,32,28,32,28,0,0,32,32,32,33,36,30,38,32,28,0,32,28,32,28,0,32,28,32,33,32,39,32,32,32,32,32,32,28,28,28,28,0,32,32,28,28,28,28,28,28,32,32,28,32,32,28,28,28,28,28,32,32,28,28,39,33,36,36,30,38,32,28,28,0,39,33,33,33,33,33,33,36,36,30,30,38,32,32,32,32,32,32,32,32,32,32,32,28,28,28,28,28,28,28,30,32,28,28,28,28,28,28,32,28,32,28,28,28,28,28,28,30,38,32,28,0,32,28,28,28,28,28,28,32,28,28,28,28,28,28,30,32,28,28,39,33,36,30,38,32,28,32,28,28,32,30,32,32,32,32,28,32,28,28,36,30,38,32,28,33,28,33,28,0,38,33,32,36,30,38,32,28,32,32,32,32,32,32,28,28,28,28,0,33,30,38,32,28,32,30,30,32,28,32,28,0,32,28,28,36,30,38,32,28,28,28,32,28,32,28,32,32,32,28,32,30,38,32,32,28,32,28,32,32,32,32,28,28,28,32,39,33,36,30,38,32,28,36,28,28,32,28,39,33,36,30,38,32,28,39,33,36,30,38,32,28,32,28,32,28,39,33,36,30,38,32,28,0,38,32,28,32,28,72,72,72,28,0,0,0,0,23,23,24,0,23,25,25,25,25,25,25,25,24,0,23,23,23,0,22,69,70,71,0,37,37,37,37,37,37,37,37,37,37,37,37,37,37,0,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,0,37,0,67,67,68,68,68,0,68,68,0,67,68,67,68,67,68,68,67,67,67,67,68,68,67,68,67,67,67,67,67,67,68,67,67,67,67,67,67,0,0,67,67,67,68,68,67,68,67,68,67,67],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,2],0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[3,3],[4,4],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10],[11,11],[12,12],[13,13],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[8,14],[9,14],[11,14],[12,14],[13,14],0,[[],3],[[],4],[[],5],[[],6],[[],7],[[],8],[[],9],[[],11],[[],12],[[],13],0,[[3,3],15],[[4,4],15],[[5,5],15],[[6,6],15],[[8,8],15],[[10,10],15],[[11,11],15],[[13,13],15],0,[[3,16],17],[[4,16],17],[[5,16],17],[[6,16],17],[[8,16],17],[[9,16],17],[[10,16],17],[[11,16],17],[[12,16],17],[[13,16],17],[[]],[14,3],[18,3],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,[[13,13],15],0,0,[19,2],0,0,0,0,0,0,0,[3,14],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[22,22],[23,23],[24,24],[25,25],[[]],[[]],[[]],[[]],[[22,22],15],[[23,23],15],[[24,24],15],[[25,25],15],[[22,16],[[20,[26]]]],[[23,16],[[20,[26]]]],[[24,16],[[20,[26]]]],[[25,16],[[20,[26]]]],[25,22],[[]],[24,22],[27,22],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[22,22],15],[[23,23],15],0,[[]],[[]],[[]],[[]],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],21],[[],21],[[],21],[[],21],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[28,29],28],[[28,29]],[[30,31],[[20,[31]]]],[[30,31],[[20,[31]]]],[32],[[32,32]],[33,[[20,[30,22]]]],[33,[[20,[15,22]]]],[28],[[33,34,34],[[20,[35,22]]]],[[36,34,34],35],[33,[[20,[35,22]]]],[33,[[20,[18,22]]]],[32,32],[32],[28,29],[32],[32],[28,29],[28,32],[33,[[20,[37,22]]]],[33,[[20,[38,22]]]],[32],[32],[32,32],[28],[28,29],[32],[28,29],[33,[[20,[36,22]]]],[[]],[[]],[[]],[[]],[[]],[32],[[]],[28,29],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[32],[28,29],[[]],[32,31],[28,31],[32],[28],[39,39],[33,33],[36,36],[30,30],[38,38],[32,32],[28,28],[[32,32]],[[28,28]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[32,32],40],[[28,28],40],[14,14],[[],35],[32],[32],[32],[[],33],[[],36],[[],30],[[],38],[[],[[32,[41]]]],[[],28],0,[32],[28,29],[32],[28,29],[14],[32,42],[28,43],[32,44],[33],[32],[[39,39],15],[32,15],[32,15],[32,15],[32,15],[[32,32],15],[32,15],[[28,29],15],[[28,45],15],[[28,28],15],[[28,29],15],0,[32],[32],[28],[28],[28],[28],[28],[28],[32],[32],[28],[32],[32],[[28,28]],[[28,[45,[29]]]],[[28,46]],[[28,46]],[[28,29]],[[32,31]],[[32,31]],[[28,31]],[[28,31]],[[39,16],[[20,[26]]]],[[33,16],[[20,[26]]]],[[36,16],[[20,[26]]]],[[36,16],[[20,[26]]]],[[30,16],[[20,[26]]]],[[38,16],[[20,[26]]]],[[32,16],[[20,[26]]]],[[28,16],[[20,[26]]]],[[28,16],[[20,[26]]]],[47,28],[[]],[48,33],[15,33],[14,33],[35,33],[[]],[18,33],[[]],[[],36],[[]],[33,30],[[]],[49,32],[45,[[32,[41]]]],[[],[[32,[41]]]],[[],[[32,[41]]]],[50,32],[29,[[32,[51,41]]]],[[],[[32,[41]]]],[28,[[32,[51,41]]]],[52,[[32,[51,41]]]],[[]],[53,[[32,[41]]]],[46,28],[[[49,[29,41]]],28],[[]],[[[45,[29]]],28],[29,28],[28,28],[29,28],[[],30],[[],[[32,[41]]]],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],[[31,31],[[32,[41]]]],[[51,31,31],28],[[31,31],32],[29,[[20,[28]]]],[[],[[20,[28,54]]]],[[],28],[[[32,[51,41]]],[[20,[28,55]]]],[[],[[45,[29]]]],[[[32,[51,41]]],28],[[30,31],33],[[38,29],33],[32],[28],0,[32],[[28,[56,[31]]],29],[[28,[57,[31]]],29],[[28,[58,[31]]],29],[[28,[59,[31]]],29],[[28,60],29],[[28,[61,[31]]],29],[32],[[28,[61,[31]]],29],[[28,60],29],[[28,[58,[31]]],29],[[28,[57,[31]]],29],[[28,[59,[31]]],29],[[28,[56,[31]]],29],[[30,33]],[[32,31]],[[28,31,46]],[[28,31,29]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[32,49],[28,[[49,[29,41]]]],[28,[[32,[51,41]]]],[32,32],[[]],[32,62],[32,63],[32,64],[32],[28],[32],[[28,29]],[[28,29],15],[36,15],[30,15],[38,15],[32,15],[28,15],[33,15],[[28,29],15],[33,15],[[28,29],15],0,[38,30],[33,39],[32],[36,31],[30,31],[38,31],[32,31],[28,31],[[32,32],15],[32,15],[32,15],[32,15],[32,15],[32,15],[[28,28],15],[[28,29],15],[[28,29],15],[[28,45],15],0,[14,33],[[],30],[[],38],[[],[[32,[41]]]],[[],28],[[],32],[30,34],[30,34],[[32,32],[[34,[40]]]],[[28,28],[[34,[40]]]],[32,34],[28,[[34,[46]]]],[[]],[32],[[28,46]],[[28,29]],[36,28],[[30,31]],[[38,29]],[[32,31]],[[28,31],46],[28],[[28,29]],[[32,31]],[[28,31]],[[32,31]],[[28,31]],[[32,31]],[[32,31]],[32],[28],[32],[[30,31,33]],[[38,29,33]],[[32,31]],[[32,31]],[[28,31]],[32],[28],[32],[32,65],[32],[[32,31],32],[[28,31],28],[[28,29],[[34,[29]]]],[[28,29],[[34,[29]]]],[[32,31]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],28],[[],28],[28,28],[[32,31]],[[28,31]],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[32,31],[[20,[66]]]],[[28,31],[[20,[66]]]],[[32,31],[[20,[66]]]],[[28,31],[[20,[66]]]],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[14,39],[38,30],[31,[[32,[41]]]],[31,28],[31,32],[[28,46],[[20,[26]]]],[46,[[20,[26]]]],[47,[[20,[26]]]],[29,[[20,[26]]]],[[28,29],[[20,[26]]]],[[],[[20,[33,22]]]],[33],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[37,[[20,[22]]]],[37,30],[37,36],[37,36],[37,36],[[]],[[]],[37,36],[37,37],[[]],[37],[37,36],[37],[37,36],[[],28],[37,37],[[37,16],[[20,[26]]]],[[37,16],[[20,[26]]]],[14,37],[[]],[37,15],[37,15],[37,36],[37,36],[[]],[37,37],[[],[[20,[37,22]]]],[[],[[20,[37,22]]]],[[],[[20,[37,22]]]],[[],[[20,[37,22]]]],[37,[[34,[37]]]],[37,36],[37,36],[37,[[20,[22]]]],[37,[[34,[37]]]],[37,37],[37,[[20,[22]]]],[37,[[20,[22]]]],[37,36],[37,36],[[]],[[],28],[[],20],[[],20],[[],21],[37,36],[[],28],[37,36],[[],[[20,[33,22]]]],0,0,0,0,0,0,0,0,0,[67,67],[[]],[[]],[[]],[[]],[68,68],[[]],[67],[67,[[32,[51,41]]]],[[],67],[67],[[68,68],15],[[68,16],[[20,[26]]]],[[67,16],[[20,[26]]]],[[]],[[]],[[],67],[67,[[34,[36]]]],[[],67],[67,67],[67,[[20,[37,22]]]],[[]],[[]],[67,[[20,[33,22]]]],[68,67],[[],67],[[],67],[67],[14],[14],[67,67],[67,14],[67,[[20,[28,22]]]],[[]],[[],20],[[],20],[[],20],[[],20],[[],21],[[],21],[67,36]],"p":[[3,"Layout"],[15,"never"],[4,"FilterType"],[4,"MangaStatus"],[4,"MangaContentRating"],[4,"MangaViewer"],[3,"Filter"],[3,"Manga"],[3,"MangaPageResult"],[3,"Listing"],[3,"Chapter"],[3,"Page"],[3,"DeepLink"],[15,"i32"],[15,"bool"],[3,"Formatter"],[6,"Result"],[15,"i64"],[3,"PanicInfo"],[4,"Result"],[3,"TypeId"],[3,"AidokuError"],[4,"AidokuErrorKind"],[4,"NodeError"],[4,"ValueCastError"],[3,"Error"],[3,"Utf8Error"],[3,"String"],[15,"str"],[3,"ArrayRef"],[15,"usize"],[3,"Vec"],[3,"ValueRef"],[4,"Option"],[15,"f64"],[3,"StringRef"],[3,"Node"],[3,"ObjectRef"],[4,"Kind"],[4,"Ordering"],[3,"Global"],[3,"Drain"],[3,"Drain"],[3,"DrainFilter"],[4,"Cow"],[15,"char"],[3,"Arguments"],[15,"f32"],[3,"Box"],[3,"VecDeque"],[15,"u8"],[3,"CString"],[3,"BinaryHeap"],[3,"FromUtf16Error"],[3,"FromUtf8Error"],[3,"RangeToInclusive"],[3,"RangeInclusive"],[3,"Range"],[3,"RangeTo"],[3,"RangeFull"],[3,"RangeFrom"],[3,"IterMut"],[3,"IntoIter"],[3,"Iter"],[3,"Splice"],[3,"TryReserveError"],[3,"Request"],[4,"HttpMethod"],[13,"ValueCast"],[13,"Utf8Error"],[13,"NodeError"],[8,"Write"]]},\
"aidoku_helpers":{"doc":"Utilities","t":[0,0,0,0,5,5,8,10,8,10,10,10,10,3,11,11,11,11,11,5,5,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["cfemail","node","substring","uri","decode_cfemail","parse_cfemail","NodeHelpers","text_with_newlines","Substring","substring_after","substring_after_last","substring_before","substring_before_last","QueryParameters","borrow","borrow_mut","clone","clone_into","default","encode_uri","encode_uri_component","fmt","fmt","from","internal_encode_uri","into","is_empty","len","new","push","push_encoded","remove_all","remove_all_encoded","set","set_encoded","to_owned","to_string","try_from","try_into","type_id","with_capacity"],"q":["aidoku_helpers","","","","aidoku_helpers::cfemail","","aidoku_helpers::node","","aidoku_helpers::substring","","","","","aidoku_helpers::uri","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Handles Cloudflare email protection.","","Substring utility functions.","Module for encoding URIs.","Replaces all <code>[email protected]</code> elements with their …","Parses <code>data-cfemail</code> attribute and returns the email …","","Get the text of the element and its children. It’s …","","Returns a substring after the first occurence of pattern.","Returns a substring after the last occurence of pattern.","Returns a substring before the first occurence of pattern.","Returns a substring before the last occurence of pattern.","Alternating, decoded query names and values.","","","","","","Percent-encode an entire URI string that is valid UTF-8.","Percent-encode an entire URI string that is valid UTF-8.","","","Returns the argument unchanged.","Percent-encode an entire URI string that is valid UTF-8.","Calls <code>U::from(self)</code>.","","","","Percent-encode the query paramter with encode_uri_component…","Add a pre-encoded query parameter to the query string.","Remove all query parameters matching given name.","Remove all query parameters matching given pre-encoded …","Percent-encode the query parameter with …","Replace any existing values with the given pair.","","","","","",""],"i":[0,0,0,0,0,0,0,14,0,15,15,15,15,0,7,7,7,7,7,0,0,7,7,7,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7],"f":[0,0,0,0,[1],[[[3,[2]]],4],0,[[],4],0,[5,[[6,[2]]]],[[],[[6,[2]]]],[5,[[6,[2]]]],[[],[[6,[2]]]],0,[[]],[[]],[7,7],[[]],[[],7],[3,4],[3,4],[[7,8],9],[[7,8],9],[[]],[[3,3],4],[[]],[7,10],[7,11],[[],7],[[7,[3,[2]],[6,[[3,[2]]]]]],[[7,[3,[2]],[6,[[3,[2]]]]]],[[7,[3,[2]]]],[[7,[3,[2]]]],[[7,[3,[2]],[6,[[3,[2]]]]]],[[7,[3,[2]],[6,[[3,[2]]]]]],[[]],[[],4],[[],12],[[],12],[[],13],[11,7]],"p":[[3,"Node"],[15,"str"],[8,"AsRef"],[3,"String"],[8,"Pattern"],[4,"Option"],[3,"QueryParameters"],[3,"Formatter"],[6,"Result"],[15,"bool"],[15,"usize"],[4,"Result"],[3,"TypeId"],[8,"NodeHelpers"],[8,"Substring"]]},\
"aidoku_imports":{"doc":"Aidoku Imports","t":[12,12,12,12,12,12,12,13,3,13,13,13,13,4,13,13,13,3,6,13,3,13,3,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,11,11,11,11,0,5,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,0,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,10,5,5,3,4,13,13,13,4,13,13,13,13,13,13,13,13,13,6,13,13,13,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,5,12,12,13,13,13,4,13,13,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11],"n":["0","0","0","0","1","1","2","Array","ArrayRef","Bool","Date","Float","Int","Kind","Node","Null","Object","ObjectRef","Rid","String","StringRef","Unknown","ValueRef","Write","advance_back_by","advance_by","as_array","as_bool","as_date","as_date","as_float","as_int","as_node","as_object","as_string","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","copy","current_date","default","default","default","default","defaults","destroy","drop","eq","error","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from_iter","get","get","html","insert","into","into","into","into","into","into_iter","is_empty","is_empty","is_empty","is_none","is_some","json","keys","kind","len","len","len","net","new","new","new","next","next_back","print","read","remove","remove","set","set","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","value_kind","values","write_char","write_fmt","write_str","defaults_get","defaults_set","AidokuError","AidokuErrorKind","DefaultNotFound","JsonParseError","ModifyError","NodeError","NodeError","NotArray","NotBool","NotFloat","NotInt","NotNode","NotObject","NotString","ParseError","Result","Unimplemented","Utf8Error","ValueCast","ValueCastError","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","eq","eq","eq","eq","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","into","into","into","into","ne","ne","reason","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","0","0","0","Node","append","array","attr","base_uri","body","borrow","borrow_mut","class_name","clone","clone_into","close","data","drop","escape","escape_html_entities","first","fmt","fmt","from","from","has_attr","has_class","html","id","into","last","new","new_fragment","new_fragment_with_uri","new_with_uri","next","outer_html","own_text","prepend","previous","select","set_html","set_text","tag_name","text","to_owned","to_string","try_from","try_into","type_id","unescape","unescape_html_entities","untrimmed_text","parse","0","1","Delete","Get","Head","HttpMethod","Post","Put","Request","body","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","close","data","delete","drop","eq","fmt","fmt","from","from","get","get_header","head","header","html","into","into","json","new","post","put","send","set_rate_limit","set_rate_limit_period","set_url","status_code","string","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","url"],"q":["aidoku_imports","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aidoku_imports::defaults","","aidoku_imports::error","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aidoku_imports::error::AidokuErrorKind","","","aidoku_imports::html","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","aidoku_imports::json","aidoku_imports::net","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","Lower-bound index","Upper-bound index","","A type which represents an array.","","","","","An enumeration of different ValueRef types.","","","","A type that represents a string-keyed and value object.","A standard descriptor, used for data exchange between the …","","A type which represents a string.","","A type which can represent value of any kind. It is used …","A trait for writing or formatting into Unicode-accepting …","","","Cast the ValueRef to an ArrayRef.","Cast the ValueRef to a boolean.","Converts a textual representaion of a date to a Unix …","Convenience method that calls ValueRef::as_date.","Cast the ValueRef to an f64.","Cast the ValueRef to an i64.","Cast the ValueRef to a Node.","Cast the ValueRef to an ObjectRef.","Cast the ValueRef to a StringRef.","","","","","","","","","","","","","","","","","","","","","Copies a ValueRef and returns a descriptor pointing to the …","Gets the current time as a Unix timestamp.","Creates a null ValueRef.","Creates an empty StringRef.","Creates an empty ArrayRef.","Creates an empty ObjectRef.","Interface for interacting with user preferences.","Destroys a ValueRef.","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","Get a ValueRef at the specified index.","Gets the value with the specified key.","A module for working with HTML. It provides a somewhat …","Insert a value at the end of the array.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Check if the string is empty.","Check if the array is empty.","Checks if the object is empty.","Check if the ValueRef is null.","Check if the ValueRef is not null.","Converts JSON to a ValueRef.","Get all keys of the object as an array.","Get the type of the ValueRef.","Returns the length of the string.","","Get the number of key-value pairs in the object.","Create and send HTTP requests.","Create a new ValueRef which points to a descriptor.","Create a new, empty ArrayRef.","Create a new, empty object.","","","Prints a message to the Aidoku logs.","Convert the StringRef into a String.","Removes the value at the specified index.","Remove the value associated with the specified key.","Sets a ValueRef at the specified index.","Sets a value with the specified key.","","","","","","","","","","","","","","","","","","","","","","Returns the kind of the ValueRef.","Get all values of the object as an array.","Writes a <code>char</code> into this writer, returning whether the …","Glue for usage of the <code>write!</code> macro with implementors of …","Writes a string slice into this writer, returning whether …","Returns the ValueRef associated with the specified key.","Sets the value of the specified key.","","","The defaults key doesn’t have a value set.","JSON parsing error.","There was an error modifying HTML.","","Error when handling HTML content through html::Node","","","","","","","","There was an error parsing HTML.","","This feature is unimplemented.","There was an error handling UTF-8 data.","Error when typecasting a ValueRef to their types.","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","Type which represents a HTML node, which can be a group of …","Add inner HTML into this element. The given HTML will be …","Get an array of Node. This is most commonly used with …","Get an attribute value by its key. To get an absolute URL …","Get the base URI of this Node","Get the document’s <code>body</code> element.","","","Get the literal value of this node’s <code>class</code> attribute. …","","","","Get the combined data of this element. Data is e.g. the …","","Get the node’s text and escape any HTML-reserved …","HTML escape an input string.","Get the first sibling of this element, which can be this …","Returns the outer HTML of the node.","","Returns the argument unchanged.","Get an instance from a Rid","Test if this element has an attribute. Case insensitive.","Test if this element has a class. Case insensitive.","Get the node’s inner HTML.","Get the <code>id</code> attribute of this element.","Calls <code>U::from(self)</code>.","Get the last sibling of this element, which can be this …","Parse HTML into a Node. As there is no base URI specified, …","Parse a HTML fragment, assuming that it forms the <code>body</code> of …","Parse a HTML fragment, assuming that it forms the <code>body</code> of …","Parse HTML into a Node. The given <code>base_uri</code> will be used …","Get the next sibling of the element, returning <code>None</code> if …","Get the node’s outer HTML.","Gets the (normalized) text owned by this element only; …","Add inner HTML into this element. The given HTML will be …","Get the previous sibling of the element, returning <code>None</code> if …","Find elements that matches the given CSS (or JQuery) …","Set the element’s inner HTML, clearning the existing …","Set the element’s text content, clearing any existing …","Get the name of the tag for this element. This will always …","Get the <strong>normalized, combined text</strong> of this element and its …","","","","","","Get the node’s text and unescape any HTML entities to …","Un-escape an HTML escaped string.","Get the text of this element and its children. Whitespace …","Parse JSON data","","","","","","","","","A type that makes a HTTP request.","Set the body’s data.","","","","","","","","Get the raw data from the response","Start a new DELETE request with the given URL.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Start a new GET request with the given URL.","Get response headers","Start a new HEAD request with the given URL.","Set a header.","Get the data as a Node.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Get the data as JSON","Start a new request with a URL and HTTP method","Start a new POST request with the given URL.","Start a new PUT request with the given URL.","","Sets the number of requests allowed within a time period.","Sets the rate limiting duration.","Set the URL for the request","Get the response’s status code","Gets the data as a string.","","","","","","","","Get the URL of the request"],"i":[4,12,1,15,4,1,1,16,0,16,16,16,16,0,16,16,16,0,0,16,0,16,0,0,1,1,4,4,4,12,4,4,4,4,4,16,4,12,1,15,16,4,12,1,15,16,4,12,1,15,16,4,12,1,15,0,0,4,12,1,15,0,0,4,16,0,16,4,12,12,1,15,16,4,4,4,4,4,4,12,12,1,1,15,1,1,15,0,1,16,4,12,1,15,1,12,1,15,4,4,0,15,4,12,1,15,0,4,1,15,1,1,0,12,1,15,1,15,16,4,12,1,15,12,16,4,12,1,15,16,4,12,1,15,16,4,12,1,15,0,15,36,36,36,0,0,0,0,28,28,29,0,28,30,30,30,30,30,30,30,29,0,28,28,28,0,27,28,29,30,27,28,29,30,27,28,29,30,27,28,29,30,27,28,29,30,27,28,29,30,27,27,27,27,28,29,30,27,28,29,30,27,28,27,27,28,29,30,27,28,29,30,27,28,29,30,27,28,29,30,37,38,39,0,14,14,14,14,14,14,14,14,14,14,14,14,14,14,0,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,0,14,0,32,32,33,33,33,0,33,33,0,32,33,32,33,32,33,33,32,32,32,32,33,33,32,33,32,32,32,32,32,32,33,32,32,32,32,32,32,0,0,32,32,32,33,33,32,33,32,33,32,32],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,2],[[3,[2]]]],[[1,2],[[3,[2]]]],[4,[[5,[1]]]],[4,[[5,[6]]]],[[4,[0,[7,[9,[8]]]],[10,[[0,[7,[9,[8]]]]]],[10,[[0,[7,[9,[8]]]]]]],[[5,[11]]]],[[12,[0,[7,[9,[8]]]],[10,[[0,[7,[9,[8]]]]]],[10,[[0,[7,[9,[8]]]]]]],11],[4,[[5,[11]]]],[4,[[5,[13]]]],[4,[[5,[14]]]],[4,[[5,[15]]]],[4,[[5,[12]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[16,16],[4,4],[12,12],[1,1],[15,15],[[]],[[]],[[]],[[]],[[]],0,[[],11],[[],4],[[],12],[[],1],[[],15],0,0,[4],[[16,16],6],0,[[16,17],18],[[4,17],18],[[12,17],18],[[12,17],18],[[1,17],18],[[15,17],18],[[]],[19,4],[[]],[20,4],[13,4],[6,4],[11,4],[[]],[[],12],[4,1],[[]],[[]],[[],1],[[1,2],4],[[15,8],4],0,[[1,4]],[[]],[[]],[[]],[[]],[[]],[[]],[12,6],[1,6],[15,6],[4,6],[4,6],0,[15,1],[4,16],[12,2],[1,2],[15,2],0,[21,4],[[],1],[[],15],[1,10],[1,10],[[[9,[8]]]],[12,22],[[1,2]],[[15,8]],[[1,2,4]],[[15,8,4]],[[]],[[]],[[]],[[]],[[]],[[],22],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],23],[[],23],[[],23],[[],23],[[],23],0,[15,1],[24,[[3,[25]]]],[26,[[3,[25]]]],[8,[[3,[25]]]],[[[9,[8]]],[[5,[4]]]],[[[9,[8]],4]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[27,27],[28,28],[29,29],[30,30],[[]],[[]],[[]],[[]],[[27,27],6],[[28,28],6],[[29,29],6],[[30,30],6],[[27,17],18],[[28,17],18],[[29,17],18],[[30,17],18],[29,27],[[]],[30,27],[31,27],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[27,27],6],[[28,28],6],0,[[]],[[]],[[]],[[]],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],23],[[],23],[[],23],[[],23],0,0,0,0,[[14,[9,[8]]],5],[14,1],[[14,[9,[8]]],12],[14,12],[14,12],[[]],[[]],[14,12],[14,14],[[]],[14],[14,12],[14],[14,12],[[[9,[8]]],22],[14,14],[[14,17],18],[[14,17],18],[[]],[21,14],[[14,[9,[8]]],6],[[14,[9,[8]]],6],[14,12],[14,12],[[]],[14,14],[9,[[5,[14]]]],[9,[[5,[14]]]],[[9,[9,[8]]],[[5,[14]]]],[[9,[9,[8]]],[[5,[14]]]],[14,[[10,[14]]]],[14,12],[14,12],[[14,[9,[8]]],5],[14,[[10,[14]]]],[[14,[9,[8]]],14],[[14,[9,[8]]],5],[[14,[9,[8]]],5],[14,12],[14,12],[[]],[[],22],[[],3],[[],3],[[],23],[14,12],[[[9,[8]]],22],[14,12],[9,[[5,[4]]]],0,0,0,0,0,0,0,0,0,[[32,9],32],[[]],[[]],[[]],[[]],[33,33],[[]],[32],[32,[[35,[34]]]],[[[9,[8]]],32],[32],[[33,33],6],[[33,17],18],[[32,17],18],[[]],[[]],[[[9,[8]]],32],[[32,[9,[8]]],[[10,[12]]]],[[[9,[8]]],32],[[32,[9,[8]],[9,[8]]],32],[32,[[5,[14]]]],[[]],[[]],[32,[[5,[4]]]],[[[9,[8]],33],32],[[[9,[8]]],32],[[[9,[8]]],32],[32],[20],[20],[[32,[9,[8]]],32],[32,20],[32,[[5,[22]]]],[[]],[[],3],[[],3],[[],3],[[],3],[[],23],[[],23],[32,12]],"p":[[3,"ArrayRef"],[15,"usize"],[4,"Result"],[3,"ValueRef"],[6,"Result"],[15,"bool"],[8,"Default"],[15,"str"],[8,"AsRef"],[4,"Option"],[15,"f64"],[3,"StringRef"],[15,"i64"],[3,"Node"],[3,"ObjectRef"],[4,"Kind"],[3,"Formatter"],[6,"Result"],[15,"f32"],[15,"i32"],[6,"Rid"],[3,"String"],[3,"TypeId"],[15,"char"],[3,"Error"],[3,"Arguments"],[3,"AidokuError"],[4,"AidokuErrorKind"],[4,"NodeError"],[4,"ValueCastError"],[3,"Utf8Error"],[3,"Request"],[4,"HttpMethod"],[15,"u8"],[3,"Vec"],[8,"Write"],[13,"ValueCast"],[13,"Utf8Error"],[13,"NodeError"]]},\
"aidoku_macros":{"doc":"","t":[14,14],"n":["format","println"],"q":["aidoku_macros",""],"d":["",""],"i":[0,0],"f":[0,0],"p":[]},\
"example_source":{"doc":"","t":[5,5,5,5,5,5,5,5,5],"n":["__wasm_get_chapter_list","__wasm_get_manga_details","__wasm_get_manga_list","__wasm_get_manga_listing","__wasm_get_page_list","__wasm_handle_notification","__wasm_handle_url","__wasm_initialize","__wasm_modify_image_request"],"q":["example_source","","","","","","","",""],"d":["","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0],"f":[[1,1],[1,1],[[1,1],1],[[1,1],1],[1,1],[1],[1,1],[[]],[1]],"p":[[15,"i32"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
